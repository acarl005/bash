{"version":1,"windowDimensions":{"x":65,"y":24,"width":1855,"height":1056,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/andy/Documents/codesmith/unit-project-slack"],"buffers":[{"id":"72fa02340fd14ea45c7e1ebeeddaeee9","text":"#React-Calendar\n\n##Goal\nThe goal of this challenge would be build your slack application in React.\n\nWe will also be introducing a tool that will handle a lot of processes for us:\n![gulp](https://avatars0.githubusercontent.com/u/6200624?v=3&s=400)\n\nWe will also begin organizing our files into many smaller components, or **modules**.\n\n\nWe will also be introducing a new build tool called Gulp to help integrate these files. Gulp (covered more in a future challenge) is commonly used in React projects to make it easier to organize your file structure. It works with something called [Browserify](http://browserify.org/) to allow you to use `module.exports` to export some JavaScript code, then you can `require` that file somewhere else to import the code. Check the [Node Docs](https://nodejs.org/api/modules.html#modules_modules) for more info.\n\nHeres a simple example\n\nSay we have a project with  this directory structure\n\n```\n.\n├── main.js\n└── people\n    └── rob.js\n\n```\nand this code is in our `people/rob.js` file\n\n````js\n// people/rob.js\n\nvar rob = {\n  name: 'Rob'\n};\nmodule.exports = Rob;\n\n````\n\nThen we can use that code in another file\n\n````js\n// main.js\nvar rob = require('./people/rob');\nconsole.log(rob.name);\n````\n\nNotice we require a **relative** path and don't need to include the `.js` file ending*\n\n\nGulp allows us to work in these compartmentalized files and compiles all of these files into one file, which can found in build/bundle.js. Do not worry too much about how gulp works (configurations are set in the Gulpfile.js file found in the root directory), just know what is it doing in the challenge. Any errors that gulp encounters when working with your code will show up in your terminal, same as before.\n\n[Browserify](http://browserify.org/) inserts the required code into that particular place. It does this recursively too, so a file you `require` can also `require` other files and so own.\n\nThis also lets us use [node packages](https://www.npmjs.com/) in our client side code. We just `require` the package we want and Browserify will bundle it up for us.\n\nFor example, if I wanted to use jQuery rather than find and src in the jquery CDN, I could use browserify to bundle it up. I would use `npm` to install jQuery and then write `$ = require('jquery')` at the top of my file.\n\nI could do something similar to use `React`\n\n##How do I get started\n1. Run the following command into your terminal:\n````\nnpm install\nbower install\n````\n\n2. To compile your React.js files, run the following command in your terminal:\n````\nnpm start\n````\nWhenever you make changes to any of your React JavaScript files, gulp will automatically recompile the code and put the code into build/bundle.js.\nOpen your page by visiting \"http://localhost:3000/\"\n\n\n# Building the calendar\n\n1. Start by breaking your calendar UI down into little pieces and naming them. The best way to do this is to actually draw out what you want your finished product to look like and break it down into the different components.\n\n1. For example we could have a `CalendarComponent` that renders multiple `WeekComponent` that each render multiple `DayComponent` etc.\n\n1. Once you've got that structure set, think about how the data you receive from Google comes and what parts of that data you actually need, its a lot easier to convert the data into objects you can understand and use rather than sifting through it whenever you need to access something.\n\n1. Get the CalendarComponent to make a `GET` request to Google to get the events. A good place to make requests for external data in the `componentWillMount` lifecycle method, which runs when the component will be rendered on the page. You can update the state with the retrieved data within your callback for the AJAX request.\n\n1. Filter that data you receive to match the component structure that you decided on. Theres a lot of data that Google calendar gives you that you don't really need.\n\n1. Map through that data and pass it down to the other components that you've created. Remember, we can use `props` to pass down data that doesn't change.\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":84,"column":3},"end":{"row":84,"column":3}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":4,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[84,3],[84,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"#React-Calendar\n"}},{"type":"change","content":{"oldRange":[[1,0],[2,0]],"newRange":[[1,0],[1,0]],"oldText":"# React-Calendar\n","newText":""}},{"type":"change","content":{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[3,0]],"oldText":"","newText":"##Goal\n"}},{"type":"change","content":{"oldRange":[[3,0],[4,0]],"newRange":[[3,0],[3,0]],"oldText":"## Goal\n","newText":""}},{"type":"change","content":{"oldRange":[[11,0],[12,0]],"newRange":[[11,0],[11,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[43,0],[54,0]],"newRange":[[43,0],[43,0]],"oldText":"=======\nWe will also be introducing a new build tool called Gulp to help integrate these files. Gulp (covered more in a future challenge) is commonly used in React projects to make it easier to organize the file structure. Notice that the javascript files in the List.js file in client/src files contain the following lines:\n```\nmodule.exports = List;\n```\nand\n```\nvar Header = require('./Header');\n```\nmodule.exports makes it possible for other files to access the object List. The require statement imports the object that is passed in module.exports. In the following example, require('./Header') imports the React component that is created in the Header file.\n>>>>>>> a37cb6b... update READMES\n","newText":""}},{"type":"change","content":{"oldRange":[[57,0],[57,0]],"newRange":[[57,0],[58,0]],"oldText":"","newText":"##How do I get started\n"}},{"type":"change","content":{"oldRange":[[58,0],[62,0]],"newRange":[[58,0],[58,0]],"oldText":"![lifecycle-methods](react-lifecycle.png)\nCheck out React's built-in [lifecycle methods](https://facebook.github.io/react/docs/component-specs.html).\n\n## How do I get started\n","newText":""}},{"type":"change","content":{"oldRange":[[59,0],[59,0]],"newRange":[[59,0],[60,0]],"oldText":"","newText":"````\n"}},{"type":"change","content":{"oldRange":[[60,0],[61,0]],"newRange":[[60,0],[60,0]],"oldText":"```\n","newText":""}},{"type":"change","content":{"oldRange":[[61,0],[62,0]],"newRange":[[61,0],[61,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[63,0],[66,0]],"newRange":[[63,0],[63,0]],"oldText":"=======\n```\n>>>>>>> a37cb6b... update READMES\n","newText":""}},{"type":"change","content":{"oldRange":[[65,0],[65,0]],"newRange":[[65,0],[66,0]],"oldText":"","newText":"````\n"}},{"type":"change","content":{"oldRange":[[66,0],[67,0]],"newRange":[[66,0],[66,0]],"oldText":"```\n","newText":""}},{"type":"change","content":{"oldRange":[[67,0],[68,0]],"newRange":[[67,0],[67,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[69,0],[73,0]],"newRange":[[69,0],[69,0]],"oldText":"=======\n```\nWhenever you make changes to any of your React javascript files, gulp will automatically recompile the code and put the code into build/bundle.js.\n>>>>>>> a37cb6b... update READMES\n","newText":""}},{"type":"change","content":{"oldRange":[[72,0],[73,0]],"newRange":[[72,0],[72,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[85,0],[92,0]],"newRange":[[85,0],[85,0]],"oldText":"=======\n## How do I test if my answer is correct?\nRun the following code in your terminal to test your code:\n```\nnpm test\n```\n>>>>>>> a37cb6b... update READMES\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[66,0],[66,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-project-slack/READMES/unit-6-react-calendar.md","digestWhenLastPersisted":"3bcd3c3eb6607e43f1e3e6f63609c9a876778d8d","preferredLineEnding":null,"nextMarkerId":153,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":73,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-project-slack/READMES/unit-6-react-calendar.md","bufferId":"72fa02340fd14ea45c7e1ebeeddaeee9","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/andy/Documents/codesmith/unit-project-slack/READMES/unit-6-react-calendar.md","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-gfm","language-javascript","language-hyperlink","language-todo"],"destroyedItemURIs":["/home/andy/Documents/codesmith/unit-project-slack/READMES/unit-4SB-calendar.md","/home/andy/Documents/codesmith/unit-project-slack/lib/bootstrap/bower.json","/home/andy/Documents/codesmith/unit-project-slack/package.json","/home/andy/Documents/codesmith/unit-project-slack/client/style.css","/home/andy/Documents/codesmith/unit-project-slack/client/javascripts/components/calendar.js","/home/andy/Documents/codesmith/unit-project-slack/client/javascripts/components/chat-form.js","/home/andy/Documents/codesmith/unit-project-slack/client/stylesheets/style.css","/home/andy/Documents/codesmith/unit-project-slack/server/server.js","/home/andy/Documents/codesmith/unit-project-slack/client/main.js","/home/andy/Documents/codesmith/unit-project-slack/bower.json","/home/andy/Documents/codesmith/unit-project-slack/Gulpfile.js","/home/andy/Documents/codesmith/unit-project-slack/index.html","/home/andy/Documents/codesmith/unit-project-slack/README.md","/home/andy/Documents/codesmith/unit-project-slack/client/javascripts/main.js"]},"packageStates":{"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2016-02-11T05:01:21.185Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"4":{"id":4,"path":"/home/andy/Documents/codesmith/unit-project-slack/READMES/unit-6-react-calendar.md","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"fuzzy-finder":{"/home/andy/Documents/codesmith/unit-project-slack/READMES/unit-6-react-calendar.md":1455166768019},"keybinding-resolver":{},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/andy/Documents/codesmith/unit-project-slack":{"isExpanded":true,"entries":{"client":{"isExpanded":false,"entries":{}},"READMES":{"isExpanded":true,"entries":{}},"server":{"isExpanded":true,"entries":{}},"test":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/andy/Documents/codesmith/unit-project-slack/READMES/unit-6-react-calendar.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":272},"find-and-replace":{"findOptions":{"findPattern":"javascript","replacePattern":"JavaScript","pathsPattern":"","useRegex":true,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["calendar/","javascript"],"replaceHistory":["JavaScript"],"pathsHistory":[]}},"fullScreen":false}