{"version":1,"windowDimensions":{"x":65,"y":24,"width":1855,"height":1056,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/andy/Documents/codesmith/hack-hour-archive"],"buffers":[{"id":"986abbbb35b1d15f42f186902ac7450d","text":"// brute force\nfunction highestProduct(array) {\n  if (!array || array.length < 3) {\n    return 0;\n  }\n  var max = -Infinity;\n  eachCombination(array, 3, function(comb) {\n    max = Math.max(max, comb[0] * comb[1] * comb[2]);\n  });\n  return max;\n}\n\nfunction eachCombination(arr, size, callback) {\n  var end = arr.length - 1;\n  var data = [];\n  combinationUtil(0, 0);\n  function combinationUtil(start, index) {\n    // Current combination is ready to be processed, call the callback\n    if (index === size) {\n      return callback(data);\n    }\n\n    // replace index with all possible elements. The condition\n    // \"end - i + 1 >= size - index\" makes sure that including one element\n    // at index will make a combination with remaining elements\n    // at remaining positions\n    for (var i = start; i <= end && end - i + 1 >= size - index; i++) {\n      data[index] = arr[i];\n      combinationUtil(i + 1, index + 1);\n    }\n  }\n}\n\n\n\n// Sort to Get 3 Highest and 2 Lowest\nfunction highestProduct(array) {\n  if (!array || array.length < 3) {\n    return 0;\n  }\n  array.sort(function(a, b) { return a - b; });\n  var usingSmalls = array[0] * array[1] * array[array.length - 1];\n  var usingBigs = array[array.length - 1] * array[array.length - 2] * array[array.length - 3];\n  return Math.max(usingSmalls, usingBigs);\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"10":{"range":{"start":{"row":36,"column":0},"end":{"row":36,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"13":{"range":{"start":{"row":36,"column":0},"end":{"row":36,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":23,"column":32},"end":{"row":23,"column":32}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2},"7":{"id":"7","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":8,"history":{"version":3,"nextCheckpointId":3,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/highest-product.js","digestWhenLastPersisted":"3ecdb392cf2bebe424fe56022f66edea32e0560e","preferredLineEnding":null,"nextMarkerId":14,"deserializer":"TextBuffer","version":5},{"id":"f023f80d3e9ce21dae391d16ab803ce0","text":"// Worst case : O(n^2)\n// Best case: already sorted O(n)\n\nfunction insertionSort(array) {\n  for (var i = 1; i < array.length; i++) {\n    var j = i;\n    while (array[j] < array[j-1] && j > 0) {\n      var temp = array[j];\n      array[j] = array[j-1];\n      array[--j] = temp;\n    }\n  }\n  return array;\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"2":{"range":{"start":{"row":3,"column":0},"end":{"row":3,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"3":{"range":{"start":{"row":11,"column":2},"end":{"row":11,"column":3}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"4":{"range":{"start":{"row":4,"column":41},"end":{"row":4,"column":42}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"5":{"range":{"start":{"row":11,"column":2},"end":{"row":11,"column":3}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"6":{"range":{"start":{"row":4,"column":41},"end":{"row":4,"column":42}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":11,"column":3},"end":{"row":11,"column":3}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/insertion-sort.js","digestWhenLastPersisted":"98d5b9b7884803417a7825d7b25700708f6860a3","preferredLineEnding":null,"nextMarkerId":7,"deserializer":"TextBuffer","version":5},{"id":"f42c95c4c3e3ac3fc2f97bcf670fa043","text":"\n// Worst case : O(n^2)\n// Best case: already sorted O(n)\n\nfunction bubbleSort(array) {\n  //starting from 0, keep swapping larger to right until you reach end\n  //then reduce tail by 1 because we've found largest number up to here\n  for (var tail = array.length; tail > 0; tail--){\n    for (var i = 0; i < tail; i++){\n      if(array[i] > array[i+1]){\n        var temp = array[i+1];\n        array[i+1] = array[i];\n        array[i] = temp;\n      }\n    }\n  }\n  return array;\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"2":{"range":{"start":{"row":4,"column":0},"end":{"row":4,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"3":{"range":{"start":{"row":4,"column":0},"end":{"row":4,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/bubble-sort.js","digestWhenLastPersisted":"13a5780cb14da206f687df3c3c78b5bf9314691f","preferredLineEnding":null,"nextMarkerId":4,"deserializer":"TextBuffer","version":5},{"id":"5b12661abfa19ff94d2ec41a8b116147","text":"// you'll need to hard-code SOMETHING. probably best to just hard-code these\nvar pad = {\n  \"1\": ['1', '2', '4'],\n  \"2\": ['1', '2', '3', '5'],\n  \"3\": ['2', '3', '6'],\n  \"4\": ['1', '4', '5', '7'],\n  \"5\": ['2', '4', '5', '6', '8'],\n  \"6\": ['3', '5', '6', '9'],\n  \"7\": ['4', '7', '8'],\n  \"8\": ['5', '7', '8', '9', '0'],\n  \"9\": ['6', '8', '9'],\n  \"0\": ['8', '0'],\n};\n\n\n// recursive solution\nfunction getPINs(observed) {\n\n  var possibilities = [];\n\n  function getAdjacents(observed, path) {\n    if (!observed) {\n      return possibilities.push(path);\n    }\n    var adjacent = pad[observed[0]];\n    observed = observed.slice(1);\n    for (var i = 0; i < adjacent.length; i++) {   // avoid doing a recursive call inside a \"forEach\". The callback given to forEach will end up doubling the size of the callstack. Use a \"for\" loop instead\n      getAdjacents(observed, path + adjacent[i]);\n    }\n  }\n  \n  getAdjacents(observed, '');\n  return possibilities;\n}\n\n\n// iterative solution\n// slightly faster\n// http://jsperf.com/observed-pin-hack-hour\nfunction getPINs(observed) {\n  var possibilities = [''];\n  while (observed) {\n    var adjacents = pad[observed[0]];\n    var newPossibles = [];\n    for (var i = 0; i < adjacents.length; i++) {\n      for (var j = 0; j < possibilities.length; j++) {\n        newPossibles.push(possibilities[j] + adjacents[i]);\n      } \n    }\n    possibilities = newPossibles;\n    observed = observed.slice(1);\n  }\n  return possibilities;\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"5":{"range":{"start":{"row":39,"column":0},"end":{"row":39,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/observed-pin.js","digestWhenLastPersisted":"1c27cbb977efc18b24bb236b0c94c82c5eb28f85","preferredLineEnding":null,"nextMarkerId":6,"deserializer":"TextBuffer","version":5},{"id":"af182459e40f23099a15bf06a0d40d08","text":"/*\nAlright, detective, one of our colleagues successfully observed our target person, Robby the robber. \nWe followed him to a secret warehouse, where we assume to find all the stolen stuff. The door to \nthis warehouse is secured by an electronic combination lock. Unfortunately our spy isn't sure about the \nPIN he saw, when Robby entered it.\n\nThe keypad has the following layout:\n\n┌───┬───┬───┐\n│ 1 │ 2 │ 3 │\n├───┼───┼───┤\n│ 4 │ 5 │ 6 │\n├───┼───┼───┤\n│ 7 │ 8 │ 9 │\n└───┼───┼───┘\n    │ 0 │\n    └───┘\nHe noted the PIN 1357, but he also said, it is possible that each of the digits he saw could actually \nbe another adjacent digit (horizontally or vertically, but not diagonally). E.g. instead of the 1 it \ncould also be the 2 or 4. And instead of the 5 it could also be the 2, 4, 6 or 8.\n\nHe also mentioned, he knows this kind of locks. You can enter an unlimited amount of wrong PINs, they \nnever finally lock the system or sound the alarm. That's why we can try out all possible (*) variations.\n\n* possible in sense of: the observed PIN itself and all variations considering the adjacent digits\n\nCan you help us to find all those variations? It would be nice to have a function, that returns an array \nof all variations for an observed PIN with a length of 1 to 8 digits. We could name the function getPINs. \nBut please note that all PINs, the observed one and also the results, must be strings, because of \npotentially leading '0's. Don't worry about the order of the array.\n\nDetective, we count on you!\n\nexpectations = {\n  \"8\": [\"5\", \"7\", \"8\", \"9\", \"0\"],\n  \"11\": [\"11\", \"22\", \"44\", \"12\", \"21\", \"14\", \"41\", \"24\", \"42\"],\n  \"369\": [\"339\",\"366\",\"399\",\"658\",\"636\",\"258\",\"268\",\"669\",\"668\",\"266\",\"369\",\"398\",\"256\",\"296\",\"259\",\"368\",\"638\",\"396\",\"238\",\"356\",\"659\",\"639\",\"666\",\"359\",\"336\",\"299\",\"338\",\"696\",\"269\",\"358\",\"656\",\"698\",\"699\",\"298\",\"236\",\"239\"],\n}\n\n*/\n\n\n\n\nfunction getPINs(observed) {\n\n}\n\n\nmodule.exports = getPINs","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"2":{"range":{"start":{"row":44,"column":0},"end":{"row":44,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"3":{"range":{"start":{"row":49,"column":0},"end":{"row":49,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":8,"column":0},"end":{"row":16,"column":9}},"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/hack-hour-archive/challenges/observed-pin.js","digestWhenLastPersisted":"cd033b44c3f5f63632834d04a19ca061a1120bee","preferredLineEnding":null,"nextMarkerId":4,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":470,"softTabs":true,"firstVisibleScreenRow":11,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":471,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/highest-product.js","bufferId":"986abbbb35b1d15f42f186902ac7450d","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":474,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":475,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/insertion-sort.js","bufferId":"f023f80d3e9ce21dae391d16ab803ce0","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":478,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":479,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/bubble-sort.js","bufferId":"f42c95c4c3e3ac3fc2f97bcf670fa043","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":482,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":483,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/observed-pin.js","bufferId":"5b12661abfa19ff94d2ec41a8b116147","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":486,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":487,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/hack-hour-archive/challenges/observed-pin.js","bufferId":"af182459e40f23099a15bf06a0d40d08","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/andy/Documents/codesmith/hack-hour-archive/challenges/observed-pin.js","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"destroyedItemURIs":["/home/andy/Documents/codesmith/hack-hour-archive/solutions/common-elements.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/rotate-grid.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/unique-number.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/repeat-number.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/pascal-triangle.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/merge-ranges.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/json-parser.md","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/json-parser-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/count-stairs-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/get-all-products-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/delete-node-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/fizzbuzz-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/delete-dups-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/apple-stocks-test.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/insertion-sort.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/common-elements.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/knight-jumps.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/merge-arrays.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/match-word.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/kth-to-last-node.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/add-linked-list.md","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/bubble-sort-test.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/superbalanced.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/add-linked-list.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/add-linked-list.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/anagrams.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/apple-stocks.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/anagrams.js","/home/andy/.jshintrc","/home/andy/Documents/codesmith/hack-hour-archive/solutions/apple-stocks.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/balanced-parens.md","/home/andy/Documents/codesmith/hack-hour-archive/challenges/balanced-parens.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/bin-to-dec.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/bin-to-dec.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/bin-to-dec.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/bubble-sort.md","/home/andy/Documents/codesmith/hack-hour-archive/challenges/bubble-sort.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/blackjack-test.js","/home/andy/Documents/codesmith/hack-hour-archive/README.md","/home/andy/Documents/codesmith/hack-hour-archive/challenges/blackjack.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/blackjack.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/bubble-sort.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/circle-country.md","/home/andy/Documents/codesmith/hack-hour-archive/challenges/common-elements.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/count-stairs.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/delete-dups.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/delete-dups.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/count-twos.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/count-stairs.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/delete-dups.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/doubly-linked-list.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/draw-stairs.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/event-emitter.md","/home/andy/Documents/codesmith/hack-hour-archive/challenges/event-emitter.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/get-all-products.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/get-all-products.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/gcd.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/fizzbuzz.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/event-emitter.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/doubly-linked-list.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/get-all-products.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/highest-product.md","/home/andy/Documents/codesmith/hack-hour-archive/solutions/circle-country.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/circle-country.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/mode-mean.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/kth-to-last-node.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/draw-stairs.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/balanced-parens.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/highest-product.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/mode-mean-test.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/mode-mean.js","/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/fizzbuzz.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/apply-it.js","/home/andy/Documents/codesmith/hack-hour-archive/solutions/apply-it.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/apply-it-test.js","/home/andy/Documents/codesmith/hack-hour-archive/.git/hooks/pre-commit.sample","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/find-in-ordered-set-spawn.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/find-in-ordered-set-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/max-subarray-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/multiples-of-3-or-5-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/count-twos-spawn.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/count-twos-test.js","/home/andy/Documents/codesmith/hack-hour-archive/test/tests/highest-product-test.js","/home/andy/Documents/codesmith/hack-hour-archive/challenges/find-in-ordered-set.js","/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/find-in-ordered-set.js"]},"packageStates":{"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2016-02-19T02:12:24.764Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"470":{"id":470,"path":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/highest-product.js","colorMarkers":[]},"474":{"id":474,"path":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/insertion-sort.js","colorMarkers":[]},"478":{"id":478,"path":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/bubble-sort.js","colorMarkers":[]},"482":{"id":482,"path":"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/observed-pin.js","colorMarkers":[]},"486":{"id":486,"path":"/home/andy/Documents/codesmith/hack-hour-archive/challenges/observed-pin.js","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"fuzzy-finder":{"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/highest-product.js":1455125974068,"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/insertion-sort.js":1455125977646,"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/bubble-sort.js":1455847270346,"/home/andy/Documents/codesmith/hack-hour-archive/test/solutions/observed-pin.js":1455847277883,"/home/andy/Documents/codesmith/hack-hour-archive/challenges/observed-pin.js":1455847293404},"keybinding-resolver":{},"metrics":{"sessionLength":630651},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/andy/Documents/codesmith/hack-hour-archive":{"isExpanded":true,"entries":{"challenges":{"isExpanded":true,"entries":{}},"test":{"isExpanded":true,"entries":{"solutions":{"isExpanded":true,"entries":{}},"tests":{"isExpanded":false,"entries":{}},"util":{"isExpanded":false,"entries":{}}}}}}},"selectedPath":"/home/andy/Documents/codesmith/hack-hour-archive/challenges/observed-pin.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":424,"width":295},"script":{"scriptViewState":"","scriptOptionsViewState":""},"find-and-replace":{"findOptions":{"findPattern":".apply","replacePattern":"","pathsPattern":"","useRegex":true,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":true},"findHistory":["    ","\\t","    ","    |\\t","pply",".apply"],"replaceHistory":["  "],"pathsHistory":[]}},"fullScreen":false}