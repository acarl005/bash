{"version":1,"windowDimensions":{"x":65,"y":24,"width":1855,"height":1056,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/andy/Documents/codesmith/unit-2-data-structure"],"buffers":[{"id":"8e8390432aee93dcc6e191eb3d54c86e","text":"<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Arrays</title>\n  <link rel=\"stylesheet\" href=\"test/lib/mocha/mocha.css\" />\n</head>\n<script src=\"test/lib/scroll.js\"></script>\n<body onload=\"loadScroll()\" onunload=\"saveScroll()\">\n  <div id=\"mocha\"></div>\n  <script src=\"test/lib/mocha/mocha.js\"></script>\n  <script>mocha.setup('bdd')</script>\n  <script src=\"test/lib/expect/index.js\"></script>\n  <script src=\"src/Stack.js\"></script>\n  <script src=\"test/stack-tests.js\"></script>\n  <script src=\"src/Queue.js\"></script>\n  <script src=\"test/queue-tests.js\"></script>\n  <script src=\"src/Set.js\"></script>\n  <script src=\"test/set-tests.js\"></script>\n  <script src=\"src/LinkedList.js\"></script>\n  <script src=\"test/linked-list-tests.js\"></script>\n  <script src=\"src/HashTable.js\"></script>\n  <script src=\"test/hash-table-tests.js\"></script>\n  <script src=\"src/extension/Tree.js\"></script>\n  <script src=\"test/tree-tests.js\"></script>\n  <script src=\"src/extension/Graph.js\"></script>\n  <script src=\"test/graph-tests.js\"></script>\n  <script src=\"src/extension/BinarySearchTree.js\"></script>\n  <script src=\"test/binary-search-tree-tests.js\"></script>\n  <script src=\"src/extension/Trie.js\"></script>\n  <script src=\"test/trie-tests.js\"></script>\n  <script>\n    mocha.globals();\n    mocha.run();\n  </script>\n</body>\n</html>\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"4":{"range":{"start":{"row":0,"column":1},"end":{"row":0,"column":5}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"5":{"range":{"start":{"row":35,"column":2},"end":{"row":35,"column":6}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/index.html","digestWhenLastPersisted":"35fdb254c83a7a082fa650a4706b65542fe03acd","preferredLineEnding":null,"nextMarkerId":10,"deserializer":"TextBuffer","version":5},{"id":"2deba3caa1888f9cd8a93627048a78cb","text":"var queue;\ndescribe('Queue', function() {\n\n  beforeEach(function() {\n    queue = new Queue();\n  });\n\n  it('should have enqueue and dequeue method', function() {\n    expect(queue).to.have.property('enqueue');\n    expect(queue).to.have.property('dequeue');\n    expect(queue.dequeue).to.be.a('function');\n    expect(queue.enqueue).to.be.a('function');\n  });\n\n  it('should push elements to queue', function() {\n    queue.enqueue(0);\n    expect(queue.dequeue()).to.eql(0);\n  });\n\n  it('should pop most recently pushed elements', function() {\n    queue.enqueue(1);\n    queue.enqueue(2);\n    expect(queue.dequeue()).to.eql(1);\n    expect(queue.dequeue()).to.eql(2);\n  });\n\n  it('should return undefined when popping empty queue', function() {\n    expect(queue.dequeue()).to.eql(undefined);\n    queue.enqueue(0);\n    queue.enqueue(1);\n    expect(queue.dequeue()).to.eql(0);\n    expect(queue.dequeue()).to.eql(1);\n  });\n\n});\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/queue-tests.js","digestWhenLastPersisted":"0ace59882e1caf73ba698151fdc208c7be31bca8","preferredLineEnding":null,"nextMarkerId":8,"deserializer":"TextBuffer","version":5},{"id":"a3096e95f673a5156d367fea502d3d6a","text":"describe('LinkedList', function() {\n  var list;\n  beforeEach(function() {\n    list = new LinkedList();\n  });\n\n  it('should have a push method', function() {\n    expect(list.push).to.be.a('function');\n  });\n\n  it('should have head set to null when list is made', function() {\n    expect(list.head).to.eql(null);\n  });\n\n  it('should push first element to head', function() {\n    list.push(5);\n    expect(list.contains(5)).to.eql(true);\n  });\n\n  it('should return false if element in not present in list', function() {\n    list.push(0);\n    expect(list.contains(1)).to.eql(false);\n  });\n\n  it('should push multiple elements', function() {\n    list.push(0);\n    list.push(1);\n    list.push(2);\n    list.push(3);\n    expect(list.head.value).to.eql(0);\n    expect(list.head.next.value).to.eql(1);\n    expect(list.head.next.next.value).to.eql(2);\n    expect(list.head.next.next.next.value).to.eql(3);\n    expect(list.head.next.next.next.next).to.eql(null);\n    expect(list.contains(0)).to.eql(true);\n    expect(list.contains(1)).to.eql(true);\n    expect(list.contains(2)).to.eql(true);\n    expect(list.contains(3)).to.eql(true);\n  });\n\n\n  // remove x to activate test\n  it('should have addToHead method', function() {\n    expect(list.addToHead).to.be.a('function');\n  });\n\n  // remove x to activate test\n  it('should add value to head', function() {\n    list.push(0);\n    list.push(1);\n    list.push(2);\n    expect(list.head.value).to.eql(0);\n    expect(list.head.next.value).to.eql(1);\n    expect(list.head.next.next.value).to.eql(2);\n    expect(list.head.next.next.next).to.eql(null);\n    list.addToHead(3);\n    expect(list.head.value).to.eql(3);\n    expect(list.head.next.value).to.eql(0);\n    expect(list.head.next.next.value).to.eql(1);\n    expect(list.head.next.next.next.value).to.eql(2);\n    expect(list.head.next.next.next.next).to.eql(null);\n    list.addToHead(4);\n    expect(list.head.value).to.eql(4);\n    expect(list.head.next.value).to.eql(3);\n    expect(list.head.next.next.value).to.eql(0);\n    expect(list.head.next.next.next.value).to.eql(1);\n    expect(list.head.next.next.next.next.value).to.eql(2);\n    expect(list.head.next.next.next.next.next).to.eql(null);\n  });\n\n  it('the constructor should take a variable number of arguments. It will add each of the arguments to the list upon instantiation', function() {\n    var newList = new LinkedList(5, 1, 2, 6, 8);\n    expect(newList.head.value).to.eql(5);\n    expect(newList.head.next.value).to.eql(1);\n    expect(newList.head.next.next.value).to.eql(2);\n    expect(newList.head.next.next.next.value).to.eql(6);\n    expect(newList.head.next.next.next.next.value).to.eql(8);\n    expect(newList.head.next.next.next.next.next).to.eql(null);\n  });\n});\n\n// remove x to activate test\ndescribe('Doubly Linked List', function() {\n  var list;\n  beforeEach(function() {\n    list = new LinkedList();\n  });\n\n  it('nodes should have back property', function() {\n    var node = new Node(0);\n    expect(node).to.have.property('back');\n  });\n\n  it('should link back reference to previous node when node is pushed to list', function() {\n    list.push(0);\n    list.push(1);\n    list.push(2);\n    expect(list.head.value).to.eql(0);\n    expect(list.head.next.value).to.eql(1);\n    expect(list.head.next.next.value).to.eql(2);\n    expect(list.head).to.equal(list.head.next.back);\n    expect(list.head.next).to.equal(list.head.next.next.back);\n  });\n});\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":82,"column":1},"end":{"row":82,"column":1}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":8,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[47,2],[47,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[47,2],[47,2]],"newRange":[[47,2],[47,3]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[47,3],[47,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[70,2],[70,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[70,2],[70,2]],"newRange":[[70,2],[70,3]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[70,3],[70,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[82,0],[82,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[82,0],[82,0]],"newRange":[[82,0],[82,1]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[82,1],[82,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[82,1],[82,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[47,0],[47,0]],"newRange":[[47,0],[48,0]],"oldText":"","newText":"  it('should add value to head', function() {\n"}},{"type":"change","content":{"oldRange":[[48,0],[49,0]],"newRange":[[48,0],[48,0]],"oldText":"  xit('should add value to head', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[70,0],[70,0]],"newRange":[[70,0],[71,0]],"oldText":"","newText":"  it('the constructor should take a variable number of arguments. It will add each of the arguments to the list upon instantiation', function() {\n"}},{"type":"change","content":{"oldRange":[[71,0],[72,0]],"newRange":[[71,0],[71,0]],"oldText":"  xit('the constructor should take a variable number of arguments. It will add each of the arguments to the list upon instantiation', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[82,0],[82,0]],"newRange":[[82,0],[83,0]],"oldText":"","newText":"describe('Doubly Linked List', function() {\n"}},{"type":"change","content":{"oldRange":[[83,0],[84,0]],"newRange":[[83,0],[83,0]],"oldText":"xdescribe('Doubly Linked List', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[83,0],[83,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[82,1],[82,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[70,0],[70,0]],"newRange":[[70,0],[71,0]],"oldText":"","newText":"<<<<<<< HEAD\n"}},{"type":"change","content":{"oldRange":[[72,0],[72,0]],"newRange":[[72,0],[75,0]],"oldText":"","newText":"=======\n  xit('the constructor should take a variable number of arguments. It will add each of the arguments to the list upon instantiation', function() {\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n"}},{"type":"change","content":{"oldRange":[[86,0],[86,0]],"newRange":[[86,0],[87,0]],"oldText":"","newText":"xdescribe('Doubly Linked List', function() {\n"}},{"type":"change","content":{"oldRange":[[87,0],[88,0]],"newRange":[[87,0],[87,0]],"oldText":"describe('Doubly Linked List', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[87,0],[87,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[82,1],[82,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[70,0],[71,0]],"newRange":[[70,0],[70,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[71,0],[74,0]],"newRange":[[71,0],[71,0]],"oldText":"=======\n  xit('the constructor should take a variable number of arguments. It will add each of the arguments to the list upon instantiation', function() {\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n","newText":""}},{"type":"change","content":{"oldRange":[[82,0],[82,0]],"newRange":[[82,0],[83,0]],"oldText":"","newText":"describe('Doubly Linked List', function() {\n"}},{"type":"change","content":{"oldRange":[[83,0],[84,0]],"newRange":[[83,0],[83,0]],"oldText":"xdescribe('Doubly Linked List', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[78,1],[78,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/linked-list-tests.js","digestWhenLastPersisted":"8dea8c7aa5245dea20bfd78ab52250503be7ccdc","preferredLineEnding":null,"nextMarkerId":29,"deserializer":"TextBuffer","version":5},{"id":"9560d5fd839fd4c39a87101a87e7a30b","text":"var trie;\n\ndescribe('Trie', function() {\n\n  before(function() {\n    trie = new Trie;\n  });\n\n  it('should have \"insert\" and \"find\" methods', function() {\n    expect(trie.insert).to.be.a('function');\n    expect(trie.find).to.be.a('function');\n  });\n\n  it('should insert one-letter strings and find them', function() {\n    trie.insert('a');\n    expect(trie.find('a')).to.equal(true);\n  });\n\n  it('should insert two-letter strings and find them', function() {\n    trie.insert('if');\n    expect(trie.find('if')).to.equal(true);\n    expect(trie.find('i')).to.equal(false);\n    expect(trie.find('f')).to.equal(false);\n  });\n\n  it('should insert and strings and find them', function() {\n    trie.insert('andy');\n    expect(trie.find('a')).to.equal(true);  // from the first test\n    expect(trie.find('an')).to.equal(false);\n    expect(trie.find('and')).to.equal(false);\n    expect(trie.find('andy')).to.equal(true);\n    trie.insert('andycarlson');\n    expect(trie.find('andycarlson')).to.equal(true);\n    expect(trie.find('andy')).to.equal(true);\n    expect(trie.find('andyc')).to.equal(false);\n    trie.insert('lololol');\n    trie.insert('corn');\n    trie.insert('iwillkickyouinthefacewithmyfist');\n    expect(trie.find('lololol')).to.equal(true);\n    expect(trie.find('corn')).to.equal(true);\n    expect(trie.find('iwillkickyouinthefacewithmyfist')).to.equal(true);\n  });\n\n});\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"5":{"range":{"start":{"row":5,"column":0},"end":{"row":5,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":2,"column":1},"end":{"row":2,"column":1}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":6,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[2,0],[2,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,1]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[2,1],[2,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[2,1],[2,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[3,0]],"oldText":"","newText":"describe('Trie', function() {\n"}},{"type":"change","content":{"oldRange":[[3,0],[4,0]],"newRange":[[3,0],[3,0]],"oldText":"xdescribe('Trie', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[3,0],[3,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[2,1],[2,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[3,0]],"oldText":"","newText":"<<<<<<< HEAD\n"}},{"type":"change","content":{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[7,0]],"oldText":"","newText":"=======\nxdescribe('Trie', function() {\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[3,1],[3,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[2,1],[2,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[3,0],[6,0]],"newRange":[[3,0],[3,0]],"oldText":"=======\nxdescribe('Trie', function() {\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[2,0],[2,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/trie-tests.js","digestWhenLastPersisted":"33994ab5aba090d9d75fbf28228df89bf8cf0a17","preferredLineEnding":null,"nextMarkerId":10,"deserializer":"TextBuffer","version":5},{"id":"8789e8b9fe7c92801a8f62794dd6ce8a","text":"describe('Binary Search Tree', function() {\n  var binarySearchTree;\n\n  beforeEach(function() {\n    binarySearchTree = new BinarySearchTree(5);\n  });\n\n  it('should have methods named \"add\", \"contains\", \"depthFirst\", \"breadthFirst\"', function() {\n    expect(binarySearchTree.add).to.be.a(\"function\");\n    expect(binarySearchTree.contains).to.be.a(\"function\");\n    expect(binarySearchTree.depthFirstIn).to.be.a(\"function\");\n    expect(binarySearchTree.depthFirstPost).to.be.a(\"function\");\n    expect(binarySearchTree.depthFirstPre).to.be.a(\"function\");\n    expect(binarySearchTree.breadthFirst).to.be.a(\"function\");\n  });\n\n  it('should add values at the correct location in the tree', function(){\n    binarySearchTree.add(2);\n    binarySearchTree.add(3);\n    binarySearchTree.add(7);\n    binarySearchTree.add(6);\n    expect(binarySearchTree.left.right.value).to.equal(3);\n    expect(binarySearchTree.right.left.value).to.equal(6);\n  });\n\n  it('should have a working \"contains\" method', function(){\n    binarySearchTree.add(2);\n    binarySearchTree.add(3);\n    binarySearchTree.add(7);\n    expect(binarySearchTree.contains(7)).to.equal(true);\n    expect(binarySearchTree.contains(8)).to.equal(false);\n  });\n\n  it('should execute a callback on every value in a tree using \"depthFirstPre\"', function(){\n    var array = [];\n    var func = function(value){ array.push(value); };\n    binarySearchTree.add(2);\n    binarySearchTree.add(3);\n    binarySearchTree.add(7);\n    binarySearchTree.add(6);\n    binarySearchTree.depthFirstPre(func);\n    expect(array).to.eql([ 5, 2, 3, 7, 6 ]);\n  });\n\n  it('should execute a callback on every value in a tree using \"depthFirstIn\"', function(){\n    var array = [];\n    var func = function(value){ array.push(value); };\n    binarySearchTree.add(2);\n    binarySearchTree.add(3);\n    binarySearchTree.add(7);\n    binarySearchTree.add(6);\n    binarySearchTree.depthFirstIn(func);\n    expect(array).to.eql([2,3,5,6,7]);\n  });\n\n  it('should execute a callback on every value in a tree using \"depthFirstPost\"', function(){\n    var array = [];\n    var func = function(value){ array.push(value); };\n    binarySearchTree.add(2);\n    binarySearchTree.add(3);\n    binarySearchTree.add(7);\n    binarySearchTree.add(6);\n    binarySearchTree.depthFirstPost(func);\n    expect(array).to.eql([ 3, 2, 6, 7, 5 ]);\n  });\n\n  it('should execute a callback on every value in a tree using \"breadthFirst\"', function(){\n    var array = [];\n    var func = function(value){ array.push(value); };\n    binarySearchTree.add(2);\n    binarySearchTree.add(3);\n    binarySearchTree.add(7);\n    binarySearchTree.add(6);\n    binarySearchTree.breadthFirst(func);\n    expect(array).to.eql([5,2,7,3,6]);\n  });\n\n  // remove x to enable test\n  it('height method should return correct height', function() {\n    binarySearchTree.left = new BinarySearchTree(3);\n    binarySearchTree.left.left = new BinarySearchTree(1);\n    expect(binarySearchTree.height()).to.eql(2);\n\n    binarySearchTree.left.left.right = new BinarySearchTree(2);\n    expect(binarySearchTree.height()).to.eql(3);\n\n    binarySearchTree.left.left.left = new BinarySearchTree(0);\n    expect(binarySearchTree.height()).to.eql(3);\n\n    binarySearchTree.right = new BinarySearchTree(8);\n    expect(binarySearchTree.height()).to.eql(3);\n  });\n\n  // remove x to enable test\n  // Note: Make sure your height function works before running this test\n  xit('tree should be self-balancing', function() {\n    binarySearchTree.add(7);\n    binarySearchTree.add(9);\n    expect(binarySearchTree.height()).to.eql(1);\n    binarySearchTree.add(11);\n    binarySearchTree.add(13);\n    binarySearchTree.add(15);\n    binarySearchTree.add(5);\n    binarySearchTree.add(12);\n    expect(binarySearchTree.height()).to.eql(2);\n  });\n\n  describe('remove method (make sure depthFirstIn passes first)', function() {\n    var tree;\n\n    beforeEach(function() {\n      tree = new BinarySearchTree(10);\n      tree.add(5);\n      tree.add(2);\n      tree.add(7);\n      tree.add(0);\n      tree.add(3);\n      tree.add(9);\n      tree.add(8);\n      tree.add(15);\n      tree.add(13);\n      tree.add(20);\n      tree.add(11);\n      tree.add(17);\n      tree.add(43);\n      tree.add(16);\n      tree.add(18);\n      tree.add(100);\n    });\n\n    it('should remove leaf nodes', function() {\n      expect(tree.toArray()).to.eql([ 0, 2, 3, 5, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 20, 43, 100 ]);\n      tree.remove(3);\n      expect(tree.toArray()).to.eql([ 0, 2, 5, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 20, 43, 100 ]);\n    });\n\n    it('should remove nodes that have one child', function() {\n      tree.remove(7);\n      expect(tree.toArray()).to.eql([ 0, 2, 3, 5, 8, 9, 10, 11, 13, 15, 16, 17, 18, 20, 43, 100 ]);\n    });\n\n    it('should remove nodes that have two children where the right child has no left child', function() {\n      tree.remove(5);\n      expect(tree.toArray()).to.eql([ 0, 2, 3, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 20, 43, 100 ]);\n      tree.remove(43);\n      expect(tree.toArray()).to.eql([ 0, 2, 3, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 20, 100 ]);\n    });\n\n    it('should remove nodes with two children where the right child has two children', function() {\n      tree.remove(15);\n      expect(tree.toArray()).to.eql([ 0, 2, 3, 5, 7, 8, 9, 10, 11, 13, 16, 17, 18, 20, 43, 100 ]);\n      tree.remove(20);\n      expect(tree.toArray()).to.eql([ 0, 2, 3, 5, 7, 8, 9, 10, 11, 13, 16, 17, 18, 43, 100 ]);\n    });\n\n  });\n\n});\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"43":{"range":{"start":{"row":79,"column":0},"end":{"row":79,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":false,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":78,"column":3},"end":{"row":78,"column":3}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":12,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,1]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,1],[0,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[107,2],[107,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[107,2],[107,2]],"newRange":[[107,2],[107,3]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[107,3],[107,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[7,51],[7,63]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[7,51],[7,63]],"newRange":[[7,51],[7,100]],"oldText":"\"depthFirst\"","newText":"\"depthFirstPre\", \"depthFirstIn\", \"depthFirstPost\""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[7,100],[7,100]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[78,2],[78,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[78,2],[78,2]],"newRange":[[78,2],[78,3]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[78,3],[78,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[78,3],[78,3]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"describe('Binary Search Tree', function() {\n"}},{"type":"change","content":{"oldRange":[[1,0],[2,0]],"newRange":[[1,0],[1,0]],"oldText":"xdescribe('Binary Search Tree', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[8,0]],"oldText":"","newText":"  it('should have methods named \"add\", \"contains\", \"depthFirst\", \"breadthFirst\"', function() {\n"}},{"type":"change","content":{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"  it('should have methods named \"add\", \"contains\", \"depthFirstPre\", \"depthFirstIn\", \"depthFirstPost\", \"breadthFirst\"', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[78,0],[78,0]],"newRange":[[78,0],[79,0]],"oldText":"","newText":"  it('height method should return correct height', function() {\n"}},{"type":"change","content":{"oldRange":[[79,0],[80,0]],"newRange":[[79,0],[79,0]],"oldText":"  xit('height method should return correct height', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[107,0],[107,0]],"newRange":[[107,0],[108,0]],"oldText":"","newText":"  describe('remove method (make sure depthFirstIn passes first)', function() {\n"}},{"type":"change","content":{"oldRange":[[108,0],[109,0]],"newRange":[[108,0],[108,0]],"oldText":"  xdescribe('remove method (make sure depthFirstIn passes first)', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[79,0],[79,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[78,3],[78,3]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[1,0]],"oldText":"","newText":"<<<<<<< HEAD\n"}},{"type":"change","content":{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[5,0]],"oldText":"","newText":"=======\nxdescribe('Binary Search Tree', function() {\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[82,3],[82,3]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[78,3],[78,3]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[0,0],[1,0]],"newRange":[[0,0],[0,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[1,0],[4,0]],"newRange":[[1,0],[1,0]],"oldText":"=======\nxdescribe('Binary Search Tree', function() {\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[74,3],[74,3]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/binary-search-tree-tests.js","digestWhenLastPersisted":"ce87e7930975a6e8dbf8733dffc5eb57c28a0b0f","preferredLineEnding":null,"nextMarkerId":53,"deserializer":"TextBuffer","version":5},{"id":"5297120272595b394954193d3d65b44e","text":"function Graph(value) {\n  this.value = value;\n  this.edges = [];\n}\n\n// creates another node (a node is another graph with its own value and edges) on the graph and adds it to the current edge\nGraph.prototype.addNode = function(value) {\n  this.edges.push(new Graph(value));\n  return this;\n};\n\nGraph.prototype.contains = function(value) {\n  var found = false;\n  this.forEach(function(val) {\n    found = found || val === value;\n  });\n  return found;\n};\n\n// removes a given value from the graph\nGraph.prototype.remove = function(value) {\n  this.forEach(function(node) {\n    for (var i = node.edges.length - 1; i >= 0; i--) {\n      if (node.edges[i].value === value) {\n        node.edges.splice(i, 1);\n      }\n    }\n  }, true);\n};\n\nGraph.prototype.forEach = function(callback, nodeOption) {\n  var node = this;\n  var clean = new Set([node]);\n  var dirty = new Set;\n  var checkClean = function(edge) {\n    if (!dirty.has(edge)) {\n      clean.add(edge);\n    }\n  };\n  while (clean.size) {\n    callback(nodeOption ? node : node.value);\n    clean.delete(node);\n    dirty.add(node);\n    node.edges.forEach(checkClean);\n    node = clean.values().next().value;\n  }\n};\n\n\nGraph.prototype.toArray = function() {\n  var arr = [];\n  this.forEach([].push.bind(arr));\n  return arr;\n};\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"2":{"range":{"start":{"row":6,"column":0},"end":{"row":6,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"3":{"range":{"start":{"row":11,"column":0},"end":{"row":11,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"4":{"range":{"start":{"row":20,"column":0},"end":{"row":20,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","preserveFolds":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":2,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[9,0]],"oldText":"","newText":"  this.edges.push(new Graph(value));\n  return this;\n"}},{"type":"change","content":{"oldRange":[[9,0],[10,0]],"newRange":[[9,0],[9,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[11,0],[12,0]],"newRange":[[11,0],[11,0]],"oldText":"// returns true if the value is contained in the set\n","newText":""}},{"type":"change","content":{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[17,0]],"oldText":"","newText":"  var found = false;\n  this.forEach(function(val) {\n    found = found || val === value;\n  });\n  return found;\n"}},{"type":"change","content":{"oldRange":[[17,0],[18,0]],"newRange":[[17,0],[17,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[21,0],[21,0]],"newRange":[[21,0],[29,0]],"oldText":"","newText":"  this.forEach(function(node) {\n    for (var i = node.edges.length - 1; i >= 0; i--) {\n      if (node.edges[i].value === value) {\n        node.edges.splice(i, 1);\n      }\n    }\n  }, true);\n};\n"}},{"type":"change","content":{"oldRange":[[30,0],[30,0]],"newRange":[[30,0],[46,0]],"oldText":"","newText":"Graph.prototype.forEach = function(callback, nodeOption) {\n  var node = this;\n  var clean = new Set([node]);\n  var dirty = new Set;\n  var checkClean = function(edge) {\n    if (!dirty.has(edge)) {\n      clean.add(edge);\n    }\n  };\n  while (clean.size) {\n    callback(nodeOption ? node : node.value);\n    clean.delete(node);\n    dirty.add(node);\n    node.edges.forEach(checkClean);\n    node = clean.values().next().value;\n  }\n"}},{"type":"change","content":{"oldRange":[[47,0],[47,0]],"newRange":[[47,0],[54,0]],"oldText":"","newText":"\n\nGraph.prototype.toArray = function() {\n  var arr = [];\n  this.forEach([].push.bind(arr));\n  return arr;\n};\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/src/extension/Graph.js","digestWhenLastPersisted":"17d95f680e7d8832de4431c4fcd00408af1b2f4f","preferredLineEnding":null,"nextMarkerId":5,"deserializer":"TextBuffer","version":5},{"id":"fa7ee22508df67f97c3d344d5e022286","text":"var graph, nodes = {}, values = [3, 5, 6, 7, 10];\ndescribe('Graph', function() {\n  beforeEach(function() {\n    graph = new Graph(0);\n    values.forEach(function(num) {\n      nodes[num] = new Graph(num);\n    });\n    graph.edges = [nodes[3], nodes[5], nodes[6]];\n    nodes[6].edges = [nodes[10]];\n    nodes[10].edges = [nodes[5], nodes[7]];\n    nodes[7].edges = [nodes[3]];\n  });\n\n  it('should have an addNode and contains function', function() {\n    expect(graph.addNode).to.be.a('function');\n    expect(graph.contains).to.be.a('function');\n  });\n\n  it('should find nodes using the contains method', function() {\n    expect(graph.contains(0)).to.be(true);\n    expect(graph.contains(3)).to.be(true);\n    expect(graph.contains(5)).to.be(true);\n    expect(graph.contains(6)).to.be(true);\n    expect(graph.contains(10)).to.be(true);\n    expect(graph.contains(7)).to.be(true);\n    expect(graph.contains(15)).to.be(false);\n  });\n\n  it('should add edges to graph', function() {\n    expect(graph.contains(1337)).to.be(false);\n    expect(graph.contains(9001)).to.be(false);\n    nodes[7].addNode(1337);\n    expect(graph.contains(1337)).to.be(true);\n    nodes[10].addNode(9001);\n    expect(graph.contains(9001)).to.be(true);\n  });\n\n  it('should remove node', function() {\n    expect(graph.contains(3)).to.be(true);\n    expect(graph.contains(5)).to.be(true);\n    graph.remove(5);\n    expect(graph.contains(5)).to.be(false);\n    graph.remove(3);\n    expect(graph.contains(3)).to.be(false);\n  });\n\n  it('should remove all nodes with inputted value', function() {\n    expect(graph.contains(10)).to.be(true);\n    graph.addNode(10);\n    graph.addNode(10);\n    graph.remove(10);\n    expect(graph.contains(10)).to.be(false);\n  });\n\n});\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":1,"column":0},"end":{"row":1,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":8,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"describe('Graph', function() {\n"}},{"type":"change","content":{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"xdescribe('Graph', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[2,0],[2,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"xdescribe('Graph', function() {\n"}},{"type":"change","content":{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"describe('Graph', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[2,0],[2,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,1]],"newRange":[[1,0],[1,0]],"oldText":"x","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/graph-tests.js","digestWhenLastPersisted":"3930dce8fc6c290829c1924ca6ae37097317cbd5","preferredLineEnding":null,"nextMarkerId":16,"deserializer":"TextBuffer","version":5},{"id":"bf3a65f4b168f220127b6eb1ad1d80c0","text":"var tree;\ndescribe('Tree', function() {\n  beforeEach(function() {\n    tree = new Tree();\n  });\n\n  it('should have add and contains function', function() {\n    expect(tree.add).to.be.a('function');\n    expect(tree.contains).to.be.a('function');\n  });\n\n  it('should have no children when created', function() {\n    expect(tree.children.length).to.eql(0);\n  });\n\n  it('should have add children', function() {\n    tree.add(5);\n    expect(tree.children[0].value).to.eql(5);\n  });\n\n  it('should have add multiple children', function() {\n    tree.add(5);\n    tree.add(8);\n    expect(tree.contains(5)).to.eql(true);\n    expect(tree.contains(8)).to.eql(true);\n  });\n\n  it('should add children to children', function() {\n    tree.add(5);\n    tree.children[0].add(4);\n    expect(tree.contains(4)).to.eql(true);\n  });\n\n  \n  it('should calculate height', function() {\n    tree.add(5);\n    tree.add(8);\n    var son = tree.children[0];\n    son.add(1);\n    son.add(4);\n    var daughter = tree.children[0];\n    daughter.add(10);\n    var grandson = son.children[1];\n    grandson.add(3);\n    expect(grandson.height()).to.be(1);\n    expect(tree.height()).to.be(3);\n  });\n});\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":1,"column":1},"end":{"row":1,"column":1}},"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":6,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,0],[1,0]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[33,0],[33,2]],"newRange":[[33,0],[33,0]],"oldText":"  ","newText":""}},{"type":"change","content":{"oldRange":[[48,0],[49,0]],"newRange":[[48,0],[48,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"describe('Tree', function() {\n"}},{"type":"change","content":{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"xdescribe('Tree', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[33,0],[33,0]],"newRange":[[33,0],[34,0]],"oldText":"","newText":"  \n"}},{"type":"change","content":{"oldRange":[[34,0],[35,0]],"newRange":[[34,0],[34,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[48,0],[48,0]],"newRange":[[48,0],[49,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[2,0],[2,0]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"xdescribe('Tree', function() {\n"}},{"type":"change","content":{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"describe('Tree', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[33,0],[33,0]],"newRange":[[33,0],[34,0]],"oldText":"","newText":"<<<<<<< HEAD\n"}},{"type":"change","content":{"oldRange":[[35,0],[35,0]],"newRange":[[35,0],[38,0]],"oldText":"","newText":"=======\n\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[2,0],[2,0]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[1,1],[1,1]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[2,0]],"oldText":"","newText":"describe('Tree', function() {\n"}},{"type":"change","content":{"oldRange":[[2,0],[3,0]],"newRange":[[2,0],[2,0]],"oldText":"xdescribe('Tree', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[33,0],[34,0]],"newRange":[[33,0],[33,0]],"oldText":"<<<<<<< HEAD\n","newText":""}},{"type":"change","content":{"oldRange":[[34,0],[37,0]],"newRange":[[34,0],[34,0]],"oldText":"=======\n\n>>>>>>> ec24b28d5649b6f48640b9ebe06f7394484c563b\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[2,0],[2,0]],"properties":{"type":"selection","preserveFolds":true,"autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/tree-tests.js","digestWhenLastPersisted":"cec0069a74089aed1d4eaedce522c2f55f4e4f62","preferredLineEnding":null,"nextMarkerId":22,"deserializer":"TextBuffer","version":5},{"id":"34090968434434a6d1e66fc4669744da","text":"function LinkedList() {\n  this.head = null;\n  this.tail = null;\n  [].forEach.call(arguments, this.push.bind(this));\n}\n\n\nfunction Node(val) {\n  this.value = val;\n  this.next = null;\n  this.back = null;\n}\n\n// adds node to end of list\nLinkedList.prototype.push = function(value) {\n  var newNode = new Node(value);\n  if (!this.head) {\n    return this.head = this.tail = newNode;\n  }\n  this.tail.next = newNode;\n  newNode.back = this.tail;\n  this.tail = newNode;\n};\n\n\n\nLinkedList.prototype.contains = function(value) {\n  for (var node = this.head; node; node = node.next) {\n    if (node.value === value) return true;\n  }\n  return false;\n};\n\n// Bonus\n// adds node to beginning of list\nLinkedList.prototype.addToHead = function(value) {\n  var newNode = new Node(value);\n  if (!this.head) {\n    return this.head = this.tail = newNode;\n  }\n  var oldHead = this.head;\n  oldHead.back = newNode;\n  newNode.next = oldHead;\n  this.head = newNode;\n};\n\nLinkedList.prototype.toArray = function() {\n  var array = [];\n  for (var node = this.head; node; node = node.next) {\n    array.push(node.value);\n  }\n  return array;\n};\n\nLinkedList.prototype.print = function() {\n  console.log(this.toArray().join(' <-> '));\n  console.log('head:', this.head.value);\n  console.log('tail:', this.tail.value);\n};\n\n\n\n\n\n\n\n\n\n\n// Extra Bonus\n// insert an item at the position specified\nLinkedList.prototype.insert = function(value, position) {\n\n}\n\n// Extra Bonus\n// remove first occurrence of value from list\nLinkedList.prototype.removeItem = function(value) {\n\n}\n\n// Extra Bonus\n// remove element at specified position in list\nLinkedList.prototype.removePosition = function(position) {\n\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"16":{"range":{"start":{"row":6,"column":0},"end":{"row":7,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"17":{"range":{"start":{"row":14,"column":0},"end":{"row":14,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"18":{"range":{"start":{"row":26,"column":0},"end":{"row":26,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"19":{"range":{"start":{"row":35,"column":0},"end":{"row":35,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"20":{"range":{"start":{"row":71,"column":0},"end":{"row":71,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"21":{"range":{"start":{"row":77,"column":0},"end":{"row":77,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"22":{"range":{"start":{"row":83,"column":0},"end":{"row":83,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","preserveFolds":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":2,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[3,0],[3,0]],"newRange":[[3,0],[4,0]],"oldText":"","newText":"  [].forEach.call(arguments, this.push.bind(this));\n"}},{"type":"change","content":{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[7,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[10,0],[10,0]],"newRange":[[10,0],[11,0]],"oldText":"","newText":"  this.back = null;\n"}},{"type":"change","content":{"oldRange":[[15,0],[15,0]],"newRange":[[15,0],[22,0]],"oldText":"","newText":"  var newNode = new Node(value);\n  if (!this.head) {\n    return this.head = this.tail = newNode;\n  }\n  this.tail.next = newNode;\n  newNode.back = this.tail;\n  this.tail = newNode;\n"}},{"type":"change","content":{"oldRange":[[22,0],[23,0]],"newRange":[[22,0],[22,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[24,0],[24,0]],"newRange":[[24,0],[26,0]],"oldText":"","newText":"\n\n"}},{"type":"change","content":{"oldRange":[[26,0],[27,0]],"newRange":[[26,0],[26,0]],"oldText":"// returns true if value is present in the list\n","newText":""}},{"type":"change","content":{"oldRange":[[27,0],[27,0]],"newRange":[[27,0],[31,0]],"oldText":"","newText":"  for (var node = this.head; node; node = node.next) {\n    if (node.value === value) return true;\n  }\n  return false;\n"}},{"type":"change","content":{"oldRange":[[31,0],[32,0]],"newRange":[[31,0],[31,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[36,0],[36,0]],"newRange":[[36,0],[45,0]],"oldText":"","newText":"  var newNode = new Node(value);\n  if (!this.head) {\n    return this.head = this.tail = newNode;\n  }\n  var oldHead = this.head;\n  oldHead.back = newNode;\n  newNode.next = oldHead;\n  this.head = newNode;\n};\n"}},{"type":"change","content":{"oldRange":[[46,0],[46,0]],"newRange":[[46,0],[52,0]],"oldText":"","newText":"LinkedList.prototype.toArray = function() {\n  var array = [];\n  for (var node = this.head; node; node = node.next) {\n    array.push(node.value);\n  }\n  return array;\n"}},{"type":"change","content":{"oldRange":[[54,0],[54,0]],"newRange":[[54,0],[69,0]],"oldText":"","newText":"LinkedList.prototype.print = function() {\n  console.log(this.toArray().join(' <-> '));\n  console.log('head:', this.head.value);\n  console.log('tail:', this.tail.value);\n};\n\n\n\n\n\n\n\n\n\n\n"}},{"type":"change","content":{"oldRange":[[73,0],[73,0]],"newRange":[[73,0],[74,0]],"oldText":"","newText":"}\n"}},{"type":"change","content":{"oldRange":[[74,0],[75,0]],"newRange":[[74,0],[74,0]],"oldText":"};\n","newText":""}},{"type":"change","content":{"oldRange":[[79,0],[79,0]],"newRange":[[79,0],[80,0]],"oldText":"","newText":"}\n"}},{"type":"change","content":{"oldRange":[[80,0],[81,0]],"newRange":[[80,0],[80,0]],"oldText":"};\n","newText":""}},{"type":"change","content":{"oldRange":[[85,0],[85,0]],"newRange":[[85,0],[86,0]],"oldText":"","newText":"}\n"}},{"type":"change","content":{"oldRange":[[86,0],[87,0]],"newRange":[[86,0],[86,0]],"oldText":"};\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[0,0],[0,0]],"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/src/LinkedList.js","digestWhenLastPersisted":"4ccb190e6b292ec2ca6a7009813c00953423e95d","preferredLineEnding":null,"nextMarkerId":23,"deserializer":"TextBuffer","version":5},{"id":"a89cf6c631b5c44052ee4bee65324ffb","text":"var hashTable;\ndescribe('HashTable', function() {\n  beforeEach(function() {\n    hashTable = new HashTable();\n  });\n\n  it('should have a set and get and remove function', function() {\n    expect(hashTable.set).to.be.a('function');\n    expect(hashTable.get).to.be.a('function');\n    expect(hashTable.remove).to.be.a('function');\n    expect(hashTable.storage.length).to.eql(16);\n  });\n\n  it('should set and get', function() {\n    hashTable.set('key','value');\n    expect(hashTable.get('key')).to.be('value');\n    expect(hashTable.storage.length).to.eql(16);\n  });\n\n  it('should set and get multiple values', function() {\n    hashTable.set('first key', 'first value');\n    hashTable.set('second key', 'second value');\n    expect(hashTable.get('first key')).to.be('first value');\n    expect(hashTable.get('second key')).to.be('second value');\n    expect(hashTable.storage.length).to.eql(16);\n  });\n\n  it('should remove value', function() {\n    hashTable.set('first key', 'first value');\n    expect(hashTable.get('first key')).to.eql('first value');\n    expect(hashTable.remove('first key')).to.eql('first value');\n    expect(hashTable.get('first key')).to.eql(undefined);\n  });\n\n  it('should handle collisions (http://en.wikipedia.org/wiki/Hash_table#Collision_resolution)', function() {\n    for (var i = 0; i < 30; i++) {\n      var key = 'key ' + i;\n      var value = 'value ' + i;\n      hashTable.set(key, value);\n      expect(hashTable.get(key)).to.be(value);\n    }\n    for (var i = 0; i < 30; i++) {\n      var key = 'key ' + i;\n      var value = 'value ' + i;\n      expect(hashTable.get(key)).to.be(value);\n    }\n  });\n\n  // BONUS\n  it('should double in size when 75% of the space is filled', function() {\n    for (var i = 0; i < 13; i++) {\n      var key = 'key ' + i;\n      var value = 'value ' + i;\n      hashTable.set(key, value);\n    }\n    expect(hashTable.SIZE).to.equal(32);\n  });\n\n  it('should halve in size when less than 25% of the space is used (cannot drop below 16)', function() {\n    for (var i = 0; i < 13; i++) {\n      var key = 'key ' + i;\n      var value = 'value ' + i;\n      hashTable.set(key, value);\n    }\n    expect(hashTable.SIZE).to.equal(32);\n    for (var i = 0; i < 5; i++) {\n      var key = 'key ' + i;\n      hashTable.remove(key);\n    }\n    expect(hashTable.SIZE).to.equal(16);\n  });\n\n});\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"49":{"range":{"start":{"row":41,"column":0},"end":{"row":41,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"50":{"range":{"start":{"row":42,"column":0},"end":{"row":42,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"51":{"range":{"start":{"row":43,"column":0},"end":{"row":43,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"52":{"range":{"start":{"row":65,"column":0},"end":{"row":65,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"53":{"range":{"start":{"row":66,"column":0},"end":{"row":66,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":61,"column":31},"end":{"row":61,"column":31}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":5,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[49,2],[49,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[49,2],[49,2]],"newRange":[[49,2],[49,3]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[49,3],[49,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[58,2],[58,2]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[58,2],[58,2]],"newRange":[[58,2],[58,3]],"oldText":"","newText":"x"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[58,3],[58,3]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[61,31],[61,31]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[49,0],[49,0]],"newRange":[[49,0],[50,0]],"oldText":"","newText":"  it('should double in size when 75% of the space is filled', function() {\n"}},{"type":"change","content":{"oldRange":[[50,0],[51,0]],"newRange":[[50,0],[50,0]],"oldText":"  xit('should double in size when 75% of the space is filled', function() {\n","newText":""}},{"type":"change","content":{"oldRange":[[58,0],[58,0]],"newRange":[[58,0],[59,0]],"oldText":"","newText":"  it('should halve in size when less than 25% of the space is used (cannot drop below 16)', function() {\n"}},{"type":"change","content":{"oldRange":[[59,0],[60,0]],"newRange":[[59,0],[59,0]],"oldText":"  xit('should halve in size when less than 25% of the space is used (cannot drop below 16)', function() {\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[61,31],[61,31]],"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/hash-table-tests.js","digestWhenLastPersisted":"6920f8a9cc45c4af36f7a9325893624600d64999","preferredLineEnding":null,"nextMarkerId":54,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":194,"softTabs":true,"firstVisibleScreenRow":10,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":195,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/index.html","bufferId":"8e8390432aee93dcc6e191eb3d54c86e","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":198,"softTabs":true,"firstVisibleScreenRow":11,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":199,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/queue-tests.js","bufferId":"2deba3caa1888f9cd8a93627048a78cb","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":202,"softTabs":true,"firstVisibleScreenRow":78,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":203,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/linked-list-tests.js","bufferId":"a3096e95f673a5156d367fea502d3d6a","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":230,"softTabs":true,"firstVisibleScreenRow":50,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":231,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/hash-table-tests.js","bufferId":"a89cf6c631b5c44052ee4bee65324ffb","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":206,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":207,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/trie-tests.js","bufferId":"9560d5fd839fd4c39a87101a87e7a30b","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":210,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":211,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/binary-search-tree-tests.js","bufferId":"8789e8b9fe7c92801a8f62794dd6ce8a","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":214,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":215,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/src/extension/Graph.js","bufferId":"5297120272595b394954193d3d65b44e","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":218,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":219,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/graph-tests.js","bufferId":"fa7ee22508df67f97c3d344d5e022286","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":222,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":223,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/tree-tests.js","bufferId":"bf3a65f4b168f220127b6eb1ad1d80c0","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":226,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":227,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/andy/Documents/codesmith/unit-2-data-structure/src/LinkedList.js","bufferId":"34090968434434a6d1e66fc4669744da","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/home/andy/Documents/codesmith/unit-2-data-structure/test/graph-tests.js","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-html","language-javascript","language-hyperlink","language-todo"],"destroyedItemURIs":["/home/andy/Documents/codesmith/unit-2-data-structure/src/HashTable.js","/home/andy/Documents/codesmith/unit-2-data-structure/src/extension/BinarySearchTree.js","/home/andy/Documents/codesmith/unit-2-data-structure/test/index.js","/home/andy/Documents/codesmith/unit-2-data-structure/src/Queue.js","/home/andy/Documents/codesmith/unit-2-data-structure/src/Set.js","/home/andy/Documents/codesmith/unit-2-data-structure/src/Stack.js","/home/andy/Documents/codesmith/unit-2-data-structure/src/PriorityQueue.js","/home/andy/Documents/codesmith/unit-2-data-structure/src/extension/Trie.js","/home/andy/Documents/codesmith/unit-2-data-structure/src/extension/Tree.js"]},"packageStates":{"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2016-02-04T23:27:19.097Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"194":{"id":194,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/index.html","colorMarkers":[]},"198":{"id":198,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/test/queue-tests.js","colorMarkers":[]},"202":{"id":202,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/test/linked-list-tests.js","colorMarkers":[]},"206":{"id":206,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/test/trie-tests.js","colorMarkers":[]},"210":{"id":210,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/test/binary-search-tree-tests.js","colorMarkers":[]},"214":{"id":214,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/src/extension/Graph.js","colorMarkers":[]},"218":{"id":218,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/test/graph-tests.js","colorMarkers":[]},"222":{"id":222,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/test/tree-tests.js","colorMarkers":[]},"226":{"id":226,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/src/LinkedList.js","colorMarkers":[]},"230":{"id":230,"path":"/home/andy/Documents/codesmith/unit-2-data-structure/test/hash-table-tests.js","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"find-and-replace":{"findOptions":{"findPattern":"visi","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["visi"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/home/andy/Documents/codesmith/unit-2-data-structure/index.html":1454615920816,"/home/andy/Documents/codesmith/unit-2-data-structure/test/queue-tests.js":1454615933471,"/home/andy/Documents/codesmith/unit-2-data-structure/test/linked-list-tests.js":1454615996219,"/home/andy/Documents/codesmith/unit-2-data-structure/test/hash-table-tests.js":1454616036303,"/home/andy/Documents/codesmith/unit-2-data-structure/test/trie-tests.js":1454615949802,"/home/andy/Documents/codesmith/unit-2-data-structure/test/binary-search-tree-tests.js":1454627902013,"/home/andy/Documents/codesmith/unit-2-data-structure/src/extension/Graph.js":1454615978556,"/home/andy/Documents/codesmith/unit-2-data-structure/test/graph-tests.js":1454627992631,"/home/andy/Documents/codesmith/unit-2-data-structure/test/tree-tests.js":1454615987240,"/home/andy/Documents/codesmith/unit-2-data-structure/src/LinkedList.js":1454615993315},"keybinding-resolver":{},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/andy/Documents/codesmith/unit-2-data-structure":{"isExpanded":true,"entries":{"assets":{"isExpanded":false,"entries":{}},"src":{"isExpanded":true,"entries":{"extension":{"isExpanded":true,"entries":{}}}},"test":{"isExpanded":true,"entries":{"lib":{"isExpanded":false,"entries":{}}}}}}},"selectedPath":"/home/andy/Documents/codesmith/unit-2-data-structure/test/graph-tests.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}