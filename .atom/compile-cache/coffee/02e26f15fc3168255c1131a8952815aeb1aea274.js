(function() {
  var Color, Palette;

  require('./helpers/matchers');

  Color = require('../lib/color');

  Palette = require('../lib/palette');

  describe('Palette', function() {
    var colors, createVar, palette, _ref;
    _ref = [], palette = _ref[0], colors = _ref[1];
    createVar = function(name, color, path, line) {
      return {
        name: name,
        color: color,
        path: path,
        line: line
      };
    };
    beforeEach(function() {
      colors = [createVar('red', new Color('#ff0000'), 'file.styl', 0), createVar('green', new Color('#00ff00'), 'file.styl', 1), createVar('blue', new Color('#0000ff'), 'file.styl', 2), createVar('redCopy', new Color('#ff0000'), 'file.styl', 3), createVar('red', new Color('#ff0000'), 'file2.styl', 0)];
      return palette = new Palette(colors);
    });
    describe('::getColorsCount', function() {
      return it('returns the number of colors in the palette', function() {
        return expect(palette.getColorsCount()).toEqual(5);
      });
    });
    describe('::getColorsNames', function() {
      return it('returns the names of the colors in the palette', function() {
        return expect(palette.getColorsNames()).toEqual(['red', 'green', 'blue', 'redCopy', 'red']);
      });
    });
    describe('::sortedByName', function() {
      return it('returns the colors and names sorted by name', function() {
        return expect(palette.sortedByName()).toEqual([colors[2], colors[1], colors[0], colors[4], colors[3]]);
      });
    });
    return describe('::sortedByColor', function() {
      return it('returns the colors and names sorted by colors', function() {
        return expect(palette.sortedByColor()).toEqual([colors[0], colors[3], colors[4], colors[1], colors[2]]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvYW5keS8uYXRvbS9wYWNrYWdlcy9waWdtZW50cy9zcGVjL3BhbGV0dGUtc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsY0FBQTs7QUFBQSxFQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUFBLENBQUE7O0FBQUEsRUFFQSxLQUFBLEdBQVEsT0FBQSxDQUFRLGNBQVIsQ0FGUixDQUFBOztBQUFBLEVBR0EsT0FBQSxHQUFVLE9BQUEsQ0FBUSxnQkFBUixDQUhWLENBQUE7O0FBQUEsRUFLQSxRQUFBLENBQVMsU0FBVCxFQUFvQixTQUFBLEdBQUE7QUFDbEIsUUFBQSxnQ0FBQTtBQUFBLElBQUEsT0FBb0IsRUFBcEIsRUFBQyxpQkFBRCxFQUFVLGdCQUFWLENBQUE7QUFBQSxJQUVBLFNBQUEsR0FBWSxTQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsSUFBZCxFQUFvQixJQUFwQixHQUFBO2FBQ1Y7QUFBQSxRQUFDLE1BQUEsSUFBRDtBQUFBLFFBQU8sT0FBQSxLQUFQO0FBQUEsUUFBYyxNQUFBLElBQWQ7QUFBQSxRQUFvQixNQUFBLElBQXBCO1FBRFU7SUFBQSxDQUZaLENBQUE7QUFBQSxJQUtBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLE1BQUEsR0FBUyxDQUNQLFNBQUEsQ0FBVSxLQUFWLEVBQXFCLElBQUEsS0FBQSxDQUFNLFNBQU4sQ0FBckIsRUFBdUMsV0FBdkMsRUFBb0QsQ0FBcEQsQ0FETyxFQUVQLFNBQUEsQ0FBVSxPQUFWLEVBQXVCLElBQUEsS0FBQSxDQUFNLFNBQU4sQ0FBdkIsRUFBeUMsV0FBekMsRUFBc0QsQ0FBdEQsQ0FGTyxFQUdQLFNBQUEsQ0FBVSxNQUFWLEVBQXNCLElBQUEsS0FBQSxDQUFNLFNBQU4sQ0FBdEIsRUFBd0MsV0FBeEMsRUFBcUQsQ0FBckQsQ0FITyxFQUlQLFNBQUEsQ0FBVSxTQUFWLEVBQXlCLElBQUEsS0FBQSxDQUFNLFNBQU4sQ0FBekIsRUFBMkMsV0FBM0MsRUFBd0QsQ0FBeEQsQ0FKTyxFQUtQLFNBQUEsQ0FBVSxLQUFWLEVBQXFCLElBQUEsS0FBQSxDQUFNLFNBQU4sQ0FBckIsRUFBdUMsWUFBdkMsRUFBcUQsQ0FBckQsQ0FMTyxDQUFULENBQUE7YUFPQSxPQUFBLEdBQWMsSUFBQSxPQUFBLENBQVEsTUFBUixFQVJMO0lBQUEsQ0FBWCxDQUxBLENBQUE7QUFBQSxJQWVBLFFBQUEsQ0FBUyxrQkFBVCxFQUE2QixTQUFBLEdBQUE7YUFDM0IsRUFBQSxDQUFHLDZDQUFILEVBQWtELFNBQUEsR0FBQTtlQUNoRCxNQUFBLENBQU8sT0FBTyxDQUFDLGNBQVIsQ0FBQSxDQUFQLENBQWdDLENBQUMsT0FBakMsQ0FBeUMsQ0FBekMsRUFEZ0Q7TUFBQSxDQUFsRCxFQUQyQjtJQUFBLENBQTdCLENBZkEsQ0FBQTtBQUFBLElBbUJBLFFBQUEsQ0FBUyxrQkFBVCxFQUE2QixTQUFBLEdBQUE7YUFDM0IsRUFBQSxDQUFHLGdEQUFILEVBQXFELFNBQUEsR0FBQTtlQUNuRCxNQUFBLENBQU8sT0FBTyxDQUFDLGNBQVIsQ0FBQSxDQUFQLENBQWdDLENBQUMsT0FBakMsQ0FBeUMsQ0FDdkMsS0FEdUMsRUFFdkMsT0FGdUMsRUFHdkMsTUFIdUMsRUFJdkMsU0FKdUMsRUFLdkMsS0FMdUMsQ0FBekMsRUFEbUQ7TUFBQSxDQUFyRCxFQUQyQjtJQUFBLENBQTdCLENBbkJBLENBQUE7QUFBQSxJQTZCQSxRQUFBLENBQVMsZ0JBQVQsRUFBMkIsU0FBQSxHQUFBO2FBQ3pCLEVBQUEsQ0FBRyw2Q0FBSCxFQUFrRCxTQUFBLEdBQUE7ZUFDaEQsTUFBQSxDQUFPLE9BQU8sQ0FBQyxZQUFSLENBQUEsQ0FBUCxDQUE4QixDQUFDLE9BQS9CLENBQXVDLENBQ3JDLE1BQU8sQ0FBQSxDQUFBLENBRDhCLEVBRXJDLE1BQU8sQ0FBQSxDQUFBLENBRjhCLEVBR3JDLE1BQU8sQ0FBQSxDQUFBLENBSDhCLEVBSXJDLE1BQU8sQ0FBQSxDQUFBLENBSjhCLEVBS3JDLE1BQU8sQ0FBQSxDQUFBLENBTDhCLENBQXZDLEVBRGdEO01BQUEsQ0FBbEQsRUFEeUI7SUFBQSxDQUEzQixDQTdCQSxDQUFBO1dBdUNBLFFBQUEsQ0FBUyxpQkFBVCxFQUE0QixTQUFBLEdBQUE7YUFDMUIsRUFBQSxDQUFHLCtDQUFILEVBQW9ELFNBQUEsR0FBQTtlQUNsRCxNQUFBLENBQU8sT0FBTyxDQUFDLGFBQVIsQ0FBQSxDQUFQLENBQStCLENBQUMsT0FBaEMsQ0FBd0MsQ0FDdEMsTUFBTyxDQUFBLENBQUEsQ0FEK0IsRUFFdEMsTUFBTyxDQUFBLENBQUEsQ0FGK0IsRUFHdEMsTUFBTyxDQUFBLENBQUEsQ0FIK0IsRUFJdEMsTUFBTyxDQUFBLENBQUEsQ0FKK0IsRUFLdEMsTUFBTyxDQUFBLENBQUEsQ0FMK0IsQ0FBeEMsRUFEa0Q7TUFBQSxDQUFwRCxFQUQwQjtJQUFBLENBQTVCLEVBeENrQjtFQUFBLENBQXBCLENBTEEsQ0FBQTtBQUFBIgp9

//# sourceURL=/home/andy/.atom/packages/pigments/spec/palette-spec.coffee
