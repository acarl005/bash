Object.defineProperty(exports, '__esModule', {
	value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _eventKit = require('event-kit');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lazyReq = require('lazy-req');

var _lazyReq2 = _interopRequireDefault(_lazyReq);

var lazyReq = (0, _lazyReq2['default'])(require);
var lodash = lazyReq('lodash');
var jshint = lazyReq('jshint');
var jsxhint = lazyReq('jshint-jsx');
var cli = lazyReq('jshint/src/cli');
var loadConfig = lazyReq('./load-config');
var markersByEditorId = {};
var errorsByEditorId = {};

var subscriptionTooltips = new _eventKit.CompositeDisposable();
var subscriptionEvents = new _eventKit.CompositeDisposable();

var _ = undefined;
var statusBar = undefined;

var SUPPORTED_GRAMMARS = ['source.js', 'source.jsx', 'source.js.jsx'];

var currentLine = undefined;
var currentChar = undefined;

var goToError = function goToError() {
	var editor = atom.workspace.getActiveTextEditor();

	if (!editor || !currentLine || !currentChar) {
		return;
	}

	editor.setCursorBufferPosition([currentLine - 1, currentChar - 1]);
};

var jsHintStatusBar = document.createElement('a');
jsHintStatusBar.setAttribute('id', 'jshint-statusbar');
jsHintStatusBar.classList.add('inline-block');
jsHintStatusBar.addEventListener('click', goToError);

var updateStatusText = function updateStatusText(line, character, reason) {
	jsHintStatusBar.textContent = line && character && reason ? 'JSHint ' + line + ':' + character + ' ' + reason : '';
	currentLine = line;
	currentChar = character;
};

var getMarkersForEditor = function getMarkersForEditor(editor) {
	if (editor && markersByEditorId[editor.id]) {
		return markersByEditorId[editor.id];
	}

	return {};
};

var getErrorsForEditor = function getErrorsForEditor(editor) {
	if (errorsByEditorId[editor.id]) {
		return errorsByEditorId[editor.id];
	}

	return [];
};

var destroyMarkerAtRow = function destroyMarkerAtRow(editor, row) {
	if (markersByEditorId[editor.id] && markersByEditorId[editor.id][row]) {
		markersByEditorId[editor.id][row].destroy();
		delete markersByEditorId[editor.id][row];
	}
};

var getRowForError = function getRowForError(error) {
	// JSHint reports `line: 0` when config error
	var line = error[0].line || 1;

	var row = line - 1;

	return row;
};

var clearOldMarkers = function clearOldMarkers(editor, errors) {
	subscriptionTooltips.dispose();
	subscriptionTooltips = new _eventKit.CompositeDisposable();

	var rows = _.map(errors, function (error) {
		return getRowForError(error);
	});

	var oldMarkers = getMarkersForEditor(editor);
	_.each(_.keys(oldMarkers), function (row) {
		if (!_.contains(rows, row)) {
			destroyMarkerAtRow(editor, row);
		}
	});
};

var saveMarker = function saveMarker(editor, marker, row) {
	if (!markersByEditorId[editor.id]) {
		markersByEditorId[editor.id] = {};
	}

	markersByEditorId[editor.id][row] = marker;
};

var getMarkerAtRow = function getMarkerAtRow(editor, row) {
	if (!markersByEditorId[editor.id]) {
		return null;
	}

	return markersByEditorId[editor.id][row];
};

var updateStatusbar = function updateStatusbar() {
	if (!statusBar) {
		return;
	}

	if (!jsHintStatusBar.parentNode) {
		statusBar.addLeftTile({ item: jsHintStatusBar });
	}

	var editor = atom.workspace.getActiveTextEditor();

	if (!editor || !errorsByEditorId[editor.id]) {
		updateStatusText();
		return;
	}

	var line = editor.getCursorBufferPosition().row + 1;
	var error = errorsByEditorId[editor.id][line] || _.first(_.compact(errorsByEditorId[editor.id]));
	error = Array.isArray(error) ? error[0] : {};

	updateStatusText(error.line, error.character, error.reason);
};

var goToNextError = function goToNextError() {
	var editor = atom.workspace.getActiveTextEditor();

	if (!editor || !markersByEditorId[editor.id] || !errorsByEditorId[editor.id]) {
		return;
	}

	var cursorRow = editor.getCursorBufferPosition().row;

	var markerRows = _.sortBy(_.map(_.keys(getMarkersForEditor(editor)), function (x) {
		return Number(x);
	}));
	var nextRow = _.find(markerRows, function (x) {
		return x > cursorRow;
	});
	if (!nextRow) {
		nextRow = _.first(markerRows);
	}
	if (!nextRow) {
		return;
	}

	var errors = errorsByEditorId[editor.id][nextRow + 1];
	if (errors) {
		editor.setCursorBufferPosition([nextRow, errors[0].character - 1]);
	}
};

var getReasonsForError = function getReasonsForError(error) {
	return _.map(error, function (el) {
		return el.character + ': ' + el.reason + ' (' + el.code + ')';
	});
};

var addReasons = function addReasons(editor, marker, error) {
	var row = getRowForError(error);
	var editorElement = atom.views.getView(editor);
	var reasons = '<div class="jshint-errors">' + getReasonsForError(error).join('<br>') + '</div>';
	var target = editorElement.shadowRoot.querySelector('.line-number[data-buffer-row="' + row + '"]');

	if (!target) {
		return;
	}

	var tooltip = atom.tooltips.add(target, {
		title: reasons,
		placement: 'bottom',
		delay: { show: 200 }
	});

	subscriptionTooltips.add(tooltip);
};

var displayError = function displayError(editor, err) {
	var row = getRowForError(err);

	if (getMarkerAtRow(editor, row)) {
		return;
	}

	var marker = editor.markBufferRange([[row, 0], [row, 1]]);
	editor.decorateMarker(marker, { type: 'line', 'class': 'jshint-line' });
	editor.decorateMarker(marker, { type: 'line-number', 'class': 'jshint-line-number' });
	saveMarker(editor, marker, row);
	addReasons(editor, marker, err);
};

var displayErrors = function displayErrors(editor) {
	var errors = _.compact(getErrorsForEditor(editor));
	clearOldMarkers(editor, errors);
	updateStatusbar();
	_.each(errors, function (err) {
		return displayError(editor, err);
	});
};

var removeMarkersForEditorId = function removeMarkersForEditorId(id) {
	if (markersByEditorId[id]) {
		delete markersByEditorId[id];
	}
};

var removeErrorsForEditorId = function removeErrorsForEditorId(id) {
	if (errorsByEditorId[id]) {
		delete errorsByEditorId[id];
	}
};

var lint = function lint() {
	var editor = atom.workspace.getActiveTextEditor();

	if (!editor) {
		return;
	}

	if (SUPPORTED_GRAMMARS.indexOf(editor.getGrammar().scopeName) === -1) {
		return;
	}

	var file = editor.getURI();

	// Hack to make JSHint look for .jshintignore in the correct dir
	// Because JSHint doesn't use its `cwd` option
	process.chdir(_path2['default'].dirname(file));

	// Remove errors and don't lint if file is ignored in .jshintignore
	if (file && cli().gather({ args: [file] }).length === 0) {
		removeErrorsForEditorId(editor.id);
		displayErrors(editor);
		removeMarkersForEditorId(editor.id);
		return;
	}

	var config = file ? loadConfig()(file) : {};
	var linter = atom.config.get('jshint.supportLintingJsx') || atom.config.get('jshint.transformJsx') ? jsxhint().JSXHINT : jshint().JSHINT;

	if (Object.keys(config).length === 0 && atom.config.get('jshint.onlyConfig')) {
		return;
	}

	try {
		linter(editor.getText(), config, config.globals);
	} catch (err) {}

	removeErrorsForEditorId(editor.id);

	// workaround the errors array sometimes containing `null`
	var errors = _.compact(linter.errors);

	if (errors.length > 0) {
		(function () {
			// aggregate same-line errors
			var ret = [];
			_.each(errors, function (el) {
				var l = el.line;

				if (Array.isArray(ret[l])) {
					ret[l].push(el);

					ret[l] = _.sortBy(ret[l], function (el) {
						return el.character;
					});
				} else {
					ret[l] = [el];
				}
			});

			errorsByEditorId[editor.id] = ret;
		})();
	}

	displayErrors(editor);
};

var debouncedLint = null;
var debouncedDisplayErrors = null;
var debouncedUpdateStatusbar = null;

var registerEvents = function registerEvents() {
	subscriptionEvents.dispose();
	subscriptionEvents = new _eventKit.CompositeDisposable();

	updateStatusbar();

	var editor = atom.workspace.getActiveTextEditor();
	if (!editor) {
		return;
	}

	displayErrors(editor);

	if (!atom.config.get('jshint.validateOnlyOnSave')) {
		subscriptionEvents.add(editor.onDidChange(debouncedLint));
		debouncedLint();
	}

	subscriptionEvents.add(editor.onDidSave(debouncedLint));
	subscriptionEvents.add(editor.onDidChangeScrollTop(function () {
		return debouncedDisplayErrors(editor);
	}));
	subscriptionEvents.add(editor.onDidChangeCursorPosition(debouncedUpdateStatusbar));

	subscriptionEvents.add(editor.onDidDestroy(function () {
		removeErrorsForEditorId(editor.id);
		displayErrors(editor);
		removeMarkersForEditorId(editor.id);
	}));
};

var config = {
	onlyConfig: {
		type: 'boolean',
		'default': false,
		description: 'Disable linter if there is no config file found for the linter.'
	},
	validateOnlyOnSave: {
		type: 'boolean',
		'default': false
	},
	supportLintingJsx: {
		type: 'boolean',
		'default': false,
		title: 'Support Linting JSX'
	}
};

exports.config = config;
var subscriptionMain = null;

var activate = function activate() {
	_ = lodash();
	debouncedLint = _.debounce(lint, 200);
	debouncedDisplayErrors = _.debounce(displayErrors, 200);
	debouncedUpdateStatusbar = _.debounce(updateStatusbar, 100);

	subscriptionMain = new _eventKit.CompositeDisposable();
	subscriptionMain.add(atom.workspace.observeActivePaneItem(registerEvents));
	subscriptionMain.add(atom.config.observe('jshint.validateOnlyOnSave', registerEvents));
	subscriptionMain.add(atom.commands.add('atom-workspace', 'jshint:lint', lint));
	subscriptionMain.add(atom.commands.add('atom-workspace', 'jshint:go-to-error', goToError));
	subscriptionMain.add(atom.commands.add('atom-workspace', 'jshint:go-to-next-error', goToNextError));
};

exports.activate = activate;
var deactivate = function deactivate() {
	subscriptionTooltips.dispose();
	subscriptionEvents.dispose();
	subscriptionMain.dispose();
};

exports.deactivate = deactivate;
var consumeStatusBar = function consumeStatusBar(instance) {
	return statusBar = instance;
};
exports.consumeStatusBar = consumeStatusBar;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/andy/.atom/packages/jshint/index.js
